const userModel = require("../models/mainModel").User;
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");


exports.login = async (req, res) => {
  try {
    // Split Json Data to Field
    const { username, password } = req.body;

    // Validate Field
    if (!username || !password)
      return res
        .status(400)
        .send({ message: "Username and Password is Required!" });

    //See All Attribute
    const userData = await userModel.findOne({ where: { username: username } });



    if (userData && (await bcrypt.compare(password, userData.password))) {

      const token = jwt.sign(
        { username: userData.username, password: userData.password },
        process.env.ENCRYPT_TOKEN_KEY,
        { algorithm: 'HS256', expiresIn: 60 * 60 * 24 }
      );

      res
        .status(200)
        .send({ result: true, data: userData, tokenKey: token, message: "Login Success" });
    } else {
      res
        .status(400)
        .send({ result: false, message: "Invalid User or Password" });
    }
  } catch (err) {
    console.log(err);
    res.status(500).send({ message: "Internal Server Error!!" });
  }
};

exports.addUser = async (req, res) => {
  try {
    userModel.create({
      user_code: req.body.user_code,
      username: req.body.username,
      password: bcrypt.hashSync(req.body.password, 10),
    })
    res.status(200).send({ result: true })
  } catch (error) {
    console.log(error)
    res.status(500).send({ message: error })
  }

};

exports.updateUser = async (req, res) => {
  try {
    userModel.update(
      { username: req.body.username },
      { where: { user_code: req.body.user_code } }
    );
    res.status(200).send({ result: true })
  } catch (error) {
    console.log(error)
    res.status(500).send({ message: error })
  }

};


exports.deleteUser = async (req, res) => {
  try {
    userModel.destroy(
      { where: { user_code: req.body.user_code } }
    );
    res.status(200).send({ result: true })
  } catch (error) {
    console.log(error)
    res.status(500).send({ message: error })
  }

};

exports.userAll = async (req, res) => {
  try {
    const userShow = await userModel.findAll();
    res.status(200).send({ result: true, data: userShow })
  } catch (error) {
    console.log(error)
    res.status(500).send({ message: error })
  }
};



// userModel.update(
//   { username: req.boy.username },
//   { where: { user_code: req.body.user_code } }
// );